import requests
import json
from bs4 import BeautifulSoup

def cve_bilgileri_al(cve_numarasi):
    """
    CIRCL API'den CVE bilgilerini alır.

    Args:
        cve_numarasi: CVE numarası (örn. "CVE-2021-34527").

    Returns:
        CVE bilgilerini içeren bir sözlük veya None (bulunamazsa).
    """
    url = f"https://cve.circl.lu/api/cve/{cve_numarasi}"

    try:
        response = requests.get(url)
        response.raise_for_status()  # HTTP hatalarını kontrol et
        data = response.json()
        return data
    except requests.exceptions.RequestException as e:
        print(f"İstek hatası ({url}): {e}")
        return None
    except json.JSONDecodeError as e:
        print(f"JSON çözümleme hatası ({url}): {e}")
        return None

def html_to_text(html_content):
    """HTML içeriğini düz metne dönüştürür."""
    if not html_content:
        return ""
    soup = BeautifulSoup(html_content, "html.parser")
    return soup.get_text(separator='\n', strip=True)

def cve_bilgileri_yazdir(data, cve_id_input=""):
    """
    CIRCL CVE bilgilerini düzgün bir şekilde yazdırır.
    """
    if not data:
        print(f"{cve_id_input} için veri bulunamadı veya alınamadı.")
        return

    cve_id = data.get('id', cve_id_input)  # CVE ID'sini al, yoksa girilen değeri kullan
    print(f"CVE {cve_id} Hakkında Bilgiler (Kaynak: CIRCL):")
    print(f"Özet: {data.get('summary', 'N/A')}")  # Özet varsa yazdır, yoksa "N/A"

    descriptions = data.get('containers', {}).get('cna', {}).get('descriptions', [])
    if descriptions:
        print("\nAçıklamalar:")
        for desc_item in descriptions:
            html_desc = desc_item.get('value')
            plain_desc = html_to_text(html_desc)  # HTML etiketlerini kaldır
            print(f" - Dil: {desc_item.get('lang', 'N/A')}\n   {plain_desc}\n") # Dili de ekle
    else:
        print("Açıklama bulunamadı.")

    affected_products = data.get('containers', {}).get('cna', {}).get('affected', [])
    if affected_products:
        print("Etkilenen Ürünler/Versiyonlar:")
        for affected in affected_products:
            print(f"  Satıcı: {affected.get('vendor', 'N/A')}")
            print(f"  Ürün: {affected.get('product', 'N/A')}")

            # Versiyon bilgilerini daha okunaklı yazdır
            for version_info in affected.get('versions', []):
                print(f"    Versiyon: {version_info.get('version', 'N/A')}, Durum: {version_info.get('status', 'N/A')}, "
                      f"Küçüktür: {version_info.get('lessThan', 'N/A')}, Tip: {version_info.get('versionType', 'N/A')}")

             # CPE bilgilerini yazdır
            if affected.get('cpes'):
                print("    CPEs:")
                for cpe in affected.get('cpes', []):
                    print(f"      {cpe}")       
            print("-" * 10) # affected ürünleri ayır
    else:
        print("Etkilenen ürün bilgisi bulunamadı.")


# Kullanım:
cve_numarasi_input = input("CVE numarası giriniz (örn: CVE-2021-34527): ")
cve_data = cve_bilgileri_al(cve_numarasi_input)
cve_bilgileri_yazdir(cve_data, cve_id_input=cve_numarasi_input)